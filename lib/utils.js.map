{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":";;;;;;;;;;;QAGgB;QASA;QA2CA;;;;;;;;AApDT,SAAS,oBAAT,CAA8B,QAA9B,EAAwC;AAC7C,SAAO,uDAAqB,YAAU,2CAA/B,CAAP,CAD6C;CAAxC;;;;;;;AASA,SAAS,YAAT,GAA+B;oCAAN;;GAAM;;AACpC,MAAM,YAAY,KAAK,CAAL,KAAc,KAAK,CAAL,OAAd,IAA4B,EAA5B,CADkB;AAEpC,MAAM,UAAU,KAAK,CAAL,KAAW,KAAK,CAAL,CAAX,CAFoB;AAGpC,MAAM,SAAS,SAAT,MAAS;WACb,YAAa;AACX,UAAI,SAAS,EAAT,CADO;;AAGX,UAAI,QAAQ,IAAR,CAAJ,EAAmB;AACjB,sCAAe,QAAQ,IAAR,EAAf;AACE,eAAK,UAAL;AACE;AACE,uBAAS,QAAQ,KAAR,0BAAT,CADF;AAEE,oBAFF;aADF;AADF,eAMO,QAAL;AACE;AACE,uBAAS,QAAQ,IAAR,CAAT,CADF;AAEE,oBAFF;aADF;AANF;AAYI,qBAAS,EAAE,SAAS,QAAQ,IAAR,CAAT,EAAX,CADF;AAXF,SADiB;OAAnB;;AAiBA,UAAI,OAAO,MAAP,KAAkB,UAAlB,EAA8B;AAChC,eAAO,MAAP,CADgC;OAAlC;;AAIA,wCACK;AACH,cAAM,YAAY,IAAZ;QAFR,CAxBW;KAAb;GADa,CAHqB;AAiCpC,SAAO,IAAP,GAAc;WAAQ,YAAY,IAAZ;GAAR,CAjCsB;AAkCpC,SAAO,MAAP,CAlCoC;CAA/B;;;;;;;;AA2CA,SAAS,aAAT,GAAyD;MAAlC,qEAAe,kBAAmB;MAAf,iEAAW,kBAAI;;AAC9D,MAAM,WAAW,SAAS,MAAT,CAAgB,UAAC,QAAD,EAAW,OAAX,EAAuB;AACtD,QAAI,CAAC,QAAQ,KAAR,IAAiB,CAAC,QAAQ,KAAR,CAAc,MAAd,EAAsB;AAC3C,aAAO,QAAP,CAD2C;KAA7C;AAGA,WAAO,QAAQ,KAAR,CAAc,MAAd,CAAqB,UAAC,YAAD,EAAe,IAAf,EAAwB;AAClD,mBAAa,IAAb,IAAqB,aAAa,IAAb,KAAsB,EAAtB,CAD6B;AAElD,mBAAa,IAAb,EAAmB,IAAnB,CAAwB,QAAQ,MAAR,CAAxB,CAFkD;AAGlD,aAAO,YAAP,CAHkD;KAAxB,EAIzB,QAJI,CAAP,CAJsD;GAAvB,EAS9B,EATc,CAAX,CADwD;;AAY9D,SAAO,YAAkC;QAAjC,8DAAQ,4BAAyB;QAAX,sBAAW;;AACvC,QAAI,CAAC,SAAS,OAAO,IAAP,CAAV,EAAwB;AAC1B,aAAO,KAAP,CAD0B;KAA5B;AAGA,WAAO,SAAS,OAAO,IAAP,CAAT,CAAsB,MAAtB,CACL,UAAC,SAAD,EAAY,MAAZ;wCAA6B,OAAO,MAAP,EAAe,SAAf;KAA7B,EAA2D,KADtD,CAAP,CAJuC;GAAlC,CAZuD;CAAzD","file":"utils.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { routeReducer }  from 'redux-simple-router';\n\nexport function combineRouteReducers(reducers) {\n  return combineReducers({ ...reducers, routing: routeReducer });\n}\n\n/**\n * @method\n * @param {...*} args - (actions) or (namespace, actions)\n * @returns {Function} actionCreatorSelector - actionCreatorSelector\n */\nexport function createAction(...args) {\n  const namespace = args[1] && `${args[0]}/` || '';\n  const actions = args[1] || args[0];\n  const action = type =>\n    (...args) => {\n      let action = {};\n\n      if (actions[type]) {\n        switch (typeof actions[type]) {\n          case 'function' :\n            {\n              action = actions[type](...args);\n              break;\n            }\n          case 'object' :\n            {\n              action = actions[type];\n              break;\n            }\n          default :\n            action = { payload: actions[type] };\n        }\n      }\n\n      if (typeof action === 'function') {\n        return action;\n      }\n\n      return {\n        ...action,\n        type: namespace + type\n      };\n    };\n  action.type = type => namespace + type;\n  return action;\n}\n\n/**\n * @method\n * @param {Object} initialState - initial state for reducer\n * @param {Object} reducers - list of reducers\n * @returns {Function} reducer - reducer\n */\nexport function createReducer(initialState = {}, reducers = []) {\n  const REDUCERS = reducers.reduce((reducers, reducer) => {\n    if (!reducer.types || !reducer.types.length) {\n      return reducers;\n    }\n    return reducer.types.reduce((prevReducers, type) => {\n      prevReducers[type] = prevReducers[type] || [];\n      prevReducers[type].push(reducer.reduce);\n      return prevReducers;\n    }, reducers);\n  }, {});\n\n  return (state = initialState, action) => {\n    if (!REDUCERS[action.type]) {\n      return state;\n    }\n    return REDUCERS[action.type].reduce(\n      (prevState, reduce) => ({ ...reduce(action, prevState) }), state\n    );\n  };\n}\n"]}